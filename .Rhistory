knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(psych)
library(ggplot2)
library(corrplot)
library(knitr)
library(sf)
file_path <- "Data/2018 County Health Rankings Data - v2.xls"
data_rank <- read_excel(file_path, sheet = "Ranked Measure Data")
data_add <- read_excel(file_path, sheet = "Additional Measure Data")
selected_data1 <- data_add %>%
select(
County,
State,
Age_Adjusted_Mortality = `Age-Adjusted Mortality`,
Drug_Overdose = `Range Drug Overdose Mortality Rate`,
Health_Care_Costs = Costs,
Disconnected_Youth = `% Disconnected Youth`,
Segregation_Index = `Segregation Index non-white/white`,
MV_Mortality_Rate = `MV Mortality Rate`,
Homicide_Rate = `Homicide Rate`,
Firearm_Fatalities_Rate = `Firearm Fatalities Rate`,
Percent_above_65 = `% 65 and over`,
Percent_Under_18 = `% < 18`,
Percent_African = `% African American`
)
selected_data2 <- data_rank %>%
select(
County,
State,
Smokers_Percentage = `% Smokers`,
Excessive_Drinking = `% Excessive Drinking`,
Uninsured_Rate = `% Uninsured`,
Preventable_Hospital_Rate = `Preventable Hosp. Rate`,
Unemployment_Rate = `% Unemployed`,
Income_Inequality_Ratio = `Income Ratio`,
Severe_Housing_Problems = `% Severe Housing Problems`,
PM2_5_Concentration = `Average Daily PM2.5`
)
selected_data = full_join(selected_data1,selected_data2)%>%
filter(!is.na(County))
normalized_data <- data.frame(lapply(selected_data, function(x) {
if(is.numeric(x)) {
(x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
} else {
x
}
}))
imputed_data <- normalized_data %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
health_behaviors <- imputed_data %>%
select(Smokers_Percentage, Excessive_Drinking, Drug_Overdose)
# Clinical Care
clinical_care <- imputed_data %>%
select(Uninsured_Rate, Preventable_Hospital_Rate, Health_Care_Costs)
# Economic Environment
economic_environment <- imputed_data %>%
select(Unemployment_Rate, Income_Inequality_Ratio, Severe_Housing_Problems)
# Social Environment
social_environment <- imputed_data %>%
select(PM2_5_Concentration, Disconnected_Youth, Segregation_Index)
# Public Health Risk
public_health_risk <- imputed_data %>%
select(MV_Mortality_Rate, Homicide_Rate, Firearm_Fatalities_Rate)
# Demographics
demographics <- imputed_data %>%
select(Percent_above_65, Percent_Under_18, Percent_African)
fa_health_behaviors <- fa(health_behaviors, nfactors = 1, rotate = "none")
scores_health_behaviors <- factor.scores(health_behaviors, fa_health_behaviors)$scores[,1]
fa_clinical_care <- fa(clinical_care, nfactors = 1, rotate = "none")
scores_clinical_care <- factor.scores(clinical_care, fa_clinical_care)$scores[,1]
fa_economic_environment <- fa(economic_environment, nfactors = 1, rotate = "none")
scores_economic_environment <- factor.scores(economic_environment, fa_economic_environment)$scores[,1]
fa_social_environment <- fa(social_environment, nfactors = 1, rotate = "none")
scores_social_environment <- factor.scores(social_environment, fa_social_environment)$scores[,1]
fa_public_health_risk <- fa(public_health_risk, nfactors = 1, rotate = "none")
scores_public_health_risk <- factor.scores(public_health_risk, fa_public_health_risk)$scores[,1]
fa_demographics <- fa(demographics, nfactors = 1, rotate = "none")
scores_demographics <- factor.scores(demographics, fa_demographics)$scores[,1]
final_scores <- data.frame(
County = imputed_data$County,
State = imputed_data$State,
Mortality = imputed_data$Age_Adjusted_Mortality,
Behavior = scores_health_behaviors,
Clinical = scores_clinical_care,
Economic = scores_economic_environment,
Social = scores_social_environment,
Risk = scores_public_health_risk,
Demographics = scores_demographics
)
scores <- final_scores %>% select(-County, -State)
summary_stats <- sapply(scores, summary)
summary_stats <- data.frame(summary_stats, check.names = FALSE, stringsAsFactors = FALSE)
stats_df <- data.frame(
Term = c("Min", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max")
)
for (var in names(summary_stats)) {
stats_df[[var]] <- sapply(summary_stats[[var]], function(x) {
round(as.numeric(sub(".*:\\s*", "", x)), digits = 6)
})
}
kable(stats_df, booktabs = TRUE, caption = "Score Summary")
library(tidyr)
final_scores_long <- final_scores %>%
select(-Mortality) %>%
pivot_longer(cols = -c(County, State), names_to = "Category", values_to = "Score")
ggplot(final_scores_long, aes(x = Category, y = Score)) +
geom_boxplot() +
theme_minimal() +
theme(axis_text_x = element_text(angle = 45, hjust = 1)) +
labs(title = "Factor Scores by Category", x = "Category", y = "Score")
ggplot(final_scores, aes(x = Mortality)) +
geom_histogram(bins = 40, fill = "black", alpha = 0.7) +
ggtitle("Distribution of Premature Age-Adjusted Mortality") +
xlab("Premature Age-Adjusted Mortality") +
ylab("Frequency")
ggplot(final_scores, aes(x = Behavior)) +
geom_histogram(bins = 40, fill = "black", alpha = 0.7) +
ggtitle("Distribution of Health Behaviors Score") +
xlab("Health Behaviors Score") +
ylab("Frequency")
ggplot(final_scores, aes(x = Mortality, y = Behavior)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Premature Age-Adjusted Mortality vs. Health Behaviors") +
xlab("Premature Age-Adjusted Mortality") +
ylab("Behavior Score")
ggplot(final_scores, aes(x = Clinical)) +
geom_histogram(bins = 40, fill = "black", alpha = 0.7) +
ggtitle("Distribution of Clinical Care Score") +
xlab("Clinical Care Score") +
ylab("Frequency")
ggplot(final_scores, aes(x = Mortality, y = Clinical)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Premature Age-Adjusted Mortality vs. Clinical Care") +
xlab("Premature Age-Adjusted Mortality") +
ylab("Clinical Care Score")
# Economic Environment Histogram
ggplot(final_scores, aes(x = Economic)) +
geom_histogram(bins = 40, fill = "black", alpha = 0.7) +
ggtitle("Distribution of Economic Environment Score") +
xlab("Economic Environment Score") +
ylab("Frequency")
ggplot(final_scores, aes(x = Mortality, y = Economic)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Premature Age-Adjusted Mortality vs. Economic Environment") +
xlab("Premature Age-Adjusted Mortality") +
ylab("Economic Environment Score")
# Social Environment Histogram
ggplot(final_scores, aes(x = Social)) +
geom_histogram(bins = 40, fill = "black", alpha = 0.7) +
ggtitle("Distribution of Social Environment Score") +
xlab("Social Environment Score") +
ylab("Frequency")
ggplot(final_scores, aes(x = Mortality, y = Social)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Premature Age-Adjusted Mortality vs. Social Environment") +
xlab("Premature Age-Adjusted Mortality") +
ylab("Social Environment Score")
# Public Health Risk Histogram
ggplot(final_scores, aes(x = Risk)) +
geom_histogram(bins = 40, fill = "black", alpha = 0.7) +
ggtitle("Distribution of Public Health Risk Score") +
xlab("Public Health Risk Score") +
ylab("Frequency")
ggplot(final_scores, aes(x = Mortality, y = Risk)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Premature Age-Adjusted Mortality vs. Public Health Risk") +
xlab("Premature Age-Adjusted Mortality") +
ylab("Public Health Risk Score")
# Demographics Histogram
ggplot(final_scores, aes(x = Demographics)) +
geom_histogram(bins = 40, fill = "black", alpha = 0.7) +
ggtitle("Distribution of Demographics Score") +
xlab("Demographics Score") +
ylab("Frequency")
ggplot(final_scores, aes(x = Mortality, y = Demographics)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Premature Age-Adjusted Mortality vs. Demographics") +
xlab("Premature Age-Adjusted Mortality") +
ylab("Demographics Score")
numeric_data <- final_scores %>%
select(-County) %>%
select_if(is.numeric)
# Compute the correlation matrix
corr_matrix <- cor(numeric_data, use = "complete.obs")
# Round the correlation matrix to four decimal places
corr_matrix_rounded <- round(corr_matrix, 4)
corrplot(corr_matrix, method = "circle", type = "full",
tl.cex = 0.7, tl.col = "black",
addCoef.col = "black",
number.cex = 0.6,
mar = c(0, 0, 1, 0),
cl.cex = 0.7, cl.ratio = 0.3,
addgrid.col = "black",
col = colorRampPalette(c("#FF7F0E", "#E0E0E0", "#1F77B4"))(200))
set.seed(123)
train_index <- sample(1:nrow(imputed_data), size = floor(0.7 * nrow(imputed_data)))
train_data <- final_scores[train_index, ]
test_data <- final_scores[-train_index, ]
# Assuming final_scores is already loaded and prepared
# Build the linear regression model
model <- lm(Mortality ~ Behavior + Clinical + Economic + Social + Risk + Demographics, data = train_data)
# Summarize the model
model_summary <- summary(model)
summary_df <- data.frame(
Term = c("Residual Standard Error", "Multiple R-squared", "Adjusted R-squared", "F-statistic", "p-value"),
Value = c(
sprintf("%.5f", model_summary$sigma),
sprintf("%.5f", model_summary$r.squared),
sprintf("%.5f", model_summary$adj.r.squared),
sprintf("%.1f on %d and %d DF", model_summary$fstatistic[1], model_summary$fstatistic[2], model_summary$fstatistic[3]),
format.pval(pf(model_summary$fstatistic[1], model_summary$fstatistic[2], model_summary$fstatistic[3], lower.tail = FALSE))
)
)
residuals_summary <- model_summary$residuals
residuals_df <- data.frame(
Term = c("Minimum", "1st Quartile", "Median", "3rd Quartile", "Maximum"),
Value = c(residuals_summary[1], residuals_summary[2], residuals_summary[3], residuals_summary[4], residuals_summary[5]),
row.names = NULL
)
kable(residuals_df, booktabs = TRUE, caption = "Residuals Summary")
kable(model_summary$coefficients, booktabs = TRUE, caption = "Coefficients Summary")
kable(summary_df, booktabs = TRUE, caption = "Model Summary")
# Diagnostic plots
par(mfrow = c(2, 2))
plot(model)
predicted_values <- predict(model, test_data)
test_data$Predicted_mortality <- predicted_values
#Mean Squared Error
mse <- mean((predicted_values - test_data$Mortality)^2)
#R-squared
ss_total <- sum((test_data$Mortality - mean(test_data$Mortality))^2)
ss_res <- sum((predicted_values - test_data$Mortality)^2)
r_squared <- 1 - (ss_res / ss_total)
performance_metrics <- data.frame(
Term = c("Mean Squared Error", "R-squared"),
Value = c(mse, r_squared)
)
kable(performance_metrics, booktabs = TRUE, caption = "Predict Performance Metrics")
test_data <- test_data %>%
mutate(residual = abs(Mortality - Predicted_mortality))  #
color_palette <- colorRampPalette(c("pink", "red","darkred"))
ggplot(test_data, aes(x = Mortality, y = Predicted_mortality)) +
geom_point(aes(color = residual), alpha = 0.8) +  #
scale_color_gradientn(colors = color_palette(100),
limits = range(test_data$residual),
na.value = "grey",
guide = "colourbar") +
geom_abline(slope = 1, intercept = 0, color = 'black', linetype = 'dashed') +
labs(title = "Actual vs Predicted Premature Age-Adjusted Mortality",
x = "Actual Premature Age-Adjusted Mortality",
y = "Predicted Premature Age-Adjusted Mortality",
color = "Residual") +
theme_minimal() +
theme(legend.position = "right")
us.shape <-
st_read("Data/US data for group task/US shapefiles/cb_2016_us_county_20m.shp")
fip.concordance <- read.csv("Data/US data for group task/fips concordance.csv")
us.shape <- us.shape %>%
merge(fip.concordance %>%
mutate(STATEFP =  ifelse(Numeric.code >= 0 & Numeric.code <= 9,
paste0(0 , Numeric.code), Numeric.code)) %>%
dplyr::rename(state = Alpha.code))
us.shape$county <- paste0(us.shape$NAME, ", ", us.shape$state)
us.shape$county <- gsub("Doña Ana, NM", "Dona Ana, NM", us.shape$county)
us.shape$county <- gsub("LaSalle, LA", "La Salle, LA", us.shape$county)
us.shape$county <- gsub("Oglala Lakota, SD", "Oglala, SD", us.shape$county)
us.shape <- left_join(us.shape, final_scores, by = c("NAME" = "County", "Name" = "State"))
ggplot(data = us.shape) +
geom_sf(aes(fill = Mortality), color = NA) +
scale_fill_gradientn(
colors = c("grey", "dark red"),
values = scales::rescale(c(0, 0.5, 1)),
limits = c(0, 1),
na.value = "white"
) +
labs(
title = "Map of Age-Adjuested Mortality",
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14),
legend.position = "right"
) +
coord_sf(xlim = c(-125, -66), ylim = c(24, 50))
plot_data_map <- function(data, var_name, xlim, ylim, title) {
if (!var_name %in% names(data)) {
stop("The specified variable does not exist in the data set.")
}
var_range <- range(data[[var_name]], na.rm = TRUE)
p <- ggplot(data = data) +
geom_sf(aes(fill = !!sym(var_name)), color = NA) +
scale_fill_gradient(
low = "light blue",
high = "dark red",
name = "Score",
na.value = "white",
limits = var_range
) +
labs(
title = title,
fill = "Score"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 12),
legend.position = "right",
legend.title = element_blank()
) +
coord_sf(xlim = xlim, ylim = ylim, expand = FALSE)
return(p)
}
# Map for Health Behaviors
map_behavior <- plot_data_map(
us.shape,
"Behavior",
xlim = c(-125, -66),
ylim = c(24, 50),
title = "Map of Health Behavior"
)
# Map for Clinical Care
map_clinical <- plot_data_map(
us.shape,
"Clinical",
xlim = c(-125, -66),
ylim = c(24, 50),
title = "Map of Clinical Care"
)
# Map for Economic Environment
map_economic <- plot_data_map(
us.shape,
"Economic",
xlim = c(-125, -66),
ylim = c(24, 50),
title = "Map of Economic Environment"
)
# Map for Social Environment
map_social <- plot_data_map(
us.shape,
"Social",
xlim = c(-125, -66),
ylim = c(24, 50),
title = "Map of Social Environment"
)
# Map for Public Health Risk
map_risk <- plot_data_map(
us.shape,
"Risk",
xlim = c(-125, -66),
ylim = c(24, 50),
title = "Map of Public Health Risk"
)
# Map for Demographics
map_demographics <- plot_data_map(
us.shape,
"Demographics",
xlim = c(-125, -66),
ylim = c(24, 50),
title = "Map of Demographics"
)
library(patchwork)
map_behavior
map_clinical
map_economic
map_social
map_risk
map_demographics
View(summary_df)
